<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fangyuanyouyue.wallet.dao.UserWithdrawMapper" >
  <resultMap id="BaseResultMap" type="com.fangyuanyouyue.wallet.model.UserWithdraw" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="pay_type" property="payType" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="real_name" property="realName" jdbcType="VARCHAR" />
    <result column="nick_name" property="nickName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, amount, pay_type, status, content, account, real_name
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_withdraw
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_withdraw
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fangyuanyouyue.wallet.model.UserWithdraw" >
    insert into user_withdraw (id, user_id, amount, 
      pay_type, status, content, 
      account, real_name)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{amount,jdbcType=DECIMAL}, 
      #{payType,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, 
      #{account,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.fangyuanyouyue.wallet.model.UserWithdraw" >
    insert into user_withdraw
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="realName != null" >
        real_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        #{realName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fangyuanyouyue.wallet.model.UserWithdraw" >
    update user_withdraw
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        real_name = #{realName,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fangyuanyouyue.wallet.model.UserWithdraw" >
    update user_withdraw
    set user_id = #{userId,jdbcType=INTEGER},
      amount = #{amount,jdbcType=DECIMAL},
      pay_type = #{payType,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR},
      real_name = #{realName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <select id="countPage" parameterType="Integer" resultType="Integer">
    select count(*) from user_withdraw a,user_info b where a.user_id=b.id
    <if test="payType != null">
      and a.pay_type = #{payType}
    </if>
    <if test="status != null">
      and a.status = #{status}
    </if>
    <if test="keyword != null">
      and (
      a.content like "%"#{keyword}"%"
      or a.account like "%"#{keyword}"%"
      or a.real_name like "%"#{keyword}"%"
      or b.nick_name like "%"#{keyword}"%"
      or b.phone like "%"#{keyword}"%"
      )
    </if>
    <if test="startDate != null">
      and a.add_time <![CDATA[ > ]]> #{startDate}
    </if>
    <if test="endDate != null">
      and a.add_time <![CDATA[ <= ]]> #{endDate}
    </if>
  </select>

  <select id="getPage" resultMap="BaseResultMap">
    select a.*,b.nick_name from user_withdraw a,user_info b where a.user_id=b.id
    <if test="payType != null">
      and a.pay_type = #{payType}
    </if>
    <if test="status != null">
      and a.status = #{status}
    </if>
    <if test="keyword != null">
      and (
      a.content like "%"#{keyword}"%"
      or a.account like "%"#{keyword}"%"
      or a.real_name like "%"#{keyword}"%"
      or b.nick_name like "%"#{keyword}"%"
      or b.phone like "%"#{keyword}"%"
      )
    </if>
    <if test="startDate != null">
      and a.add_time <![CDATA[ > ]]> #{startDate}
    </if>
    <if test="endDate != null">
      and a.add_time <![CDATA[ <= ]]> #{endDate}
    </if>
    <if test="orders != null">
      order by a.${orders}
      <if test="ascType != null and ascType == 2">
        desc
      </if>
    </if>
    limit #{start},#{limit}
  </select>
</mapper>