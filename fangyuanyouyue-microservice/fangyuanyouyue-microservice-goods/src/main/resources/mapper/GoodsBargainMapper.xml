<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fangyuanyouyue.goods.dao.GoodsBargainMapper">
  <resultMap id="BaseResultMap" type="com.fangyuanyouyue.goods.model.GoodsBargain">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="add_time" jdbcType="TIMESTAMP" property="addTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="address_id" jdbcType="INTEGER" property="addressId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, goods_id, price, reason, status, add_time, update_time, address_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from goods_bargain
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goods_bargain
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fangyuanyouyue.goods.model.GoodsBargain" useGeneratedKeys="true" keyProperty="id">
    insert into goods_bargain (id, user_id, goods_id, 
      price, reason, status, 
      add_time, update_time, address_id
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, 
      #{price,jdbcType=DECIMAL}, #{reason,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{addTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{addressId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.fangyuanyouyue.goods.model.GoodsBargain">
    insert into goods_bargain
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="addressId != null">
        address_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="addressId != null">
        #{addressId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fangyuanyouyue.goods.model.GoodsBargain">
    update goods_bargain
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="addressId != null">
        address_id = #{addressId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fangyuanyouyue.goods.model.GoodsBargain">
    update goods_bargain
    set user_id = #{userId,jdbcType=INTEGER},
      goods_id = #{goodsId,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL},
      reason = #{reason,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      address_id = #{addressId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectByUserIdGoodsId" parameterType="Integer" resultMap="BaseResultMap">
    select * from goods_bargain where user_id = #{userId} and goods_id = #{goodsId}
    <if test="status != null">
      and status = #{status}
    </if>
  </select>
  <select id="selectAllByGoodsId" parameterType="Integer" resultMap="BaseResultMap">
    select * from goods_bargain
    <where>
      1=1
      <if test="goodsId != null">
        and goods_id = #{goodsId}
      </if>
      <if test="status != null">
        and status = #{status}
      </if>
    </where>
    order by add_time desc
  </select>
  <select id="selectAllByUserId" parameterType="Integer" resultMap="BaseResultMap">
    select * from goods_bargain
    <where>
      1=1
      <if test="userId != null">
        and user_id = #{userId}
      </if>
      <if test="status != null">
        and status = #{status}
      </if>
    </where>
  </select>
  <!--<select id="selectGoodsIdsByUserId" parameterType="Integer" resultType="Integer">-->
    <!--select DISTINCT goods_id from goods_bargain where user_id = #{userId} order by add_time desc limit #{start},#{limit}-->
  <!--</select>-->
  <select id="selectGoodsIdsByUserId" parameterType="Integer" resultType="Integer">
    select DISTINCT a.goods_id from goods_bargain a,goods_info b,user_info c
    <where>
      a.goods_id = b.id and b.user_id = c.id
      <if test="userId != null">
        and a.user_id = #{userId}
      </if>
      <if test="search != null and search != ''">
        and (b.name like "%"#{search}"%" or b.description like "%"#{search}"%" or c.nick_name like "%"#{search}"%")
      </if>
    </where>
  </select>
</mapper>